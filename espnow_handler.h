#ifndef ESPNOW_HANDLER_H
#define ESPNOW_HANDLER_H

#include <Arduino.h>
#include <WiFi.h>
#include "ESP32_NOW.h"
#include <ArduinoJson.h>
#include <cstring>

#include "config.h"
#include "protocol_handler.h"

// void processReceivedData(StaticJsonDocument<512> &message, const uint8_t *mac_addr);

bool isMacExist(const uint8_t *mac_addr)
{
  for (int i = 0; i < Device.deviceCount; i++)
  {
    if (memcmp(Device.MACList[i], mac_addr, 6) == 0)
    {
      return true; // MAC ƒë√£ t·ªìn t·∫°i
    }
  }
  return false;
}

//Th√™m Mac v√†o danh s√°ch
void addMacToList(int id, int lid, const uint8_t *mac_addr, unsigned long time_)
{
  if (Device.deviceCount < MAX_DEVICES && !isMacExist(mac_addr))
  {
    memcpy(Device.MACList[Device.deviceCount], mac_addr, 6);

    Device.DeviceID[Device.deviceCount] = id;
    Device.LocalID[Device.deviceCount] = lid;
    Device.timeLIC[Device.deviceCount] = time_;

    Device.deviceCount++;
    char macStr[18];
    snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
             mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
    Serial.print("Thi·∫øt b·ªã m·ªõi: ");
    Serial.println(macStr);
  }
}

//Hi·ªÉn th·ªã danh s√°ch thi·∫øt b·ªã ƒë√£ l∆∞u
void printDeviceList()
{
  Serial.println("Danh s√°ch thi·∫øt b·ªã ƒë√£ t√¨m th·∫•y:");
  for (int i = 0; i < Device.deviceCount; i++)
  {
    char macStr[18];
    snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
             Device.MACList[i][0], Device.MACList[i][1], Device.MACList[i][2],
             Device.MACList[i][3], Device.MACList[i][4], Device.MACList[i][5]);
    Serial.print("Thi·∫øt b·ªã ");
    Serial.print(i + 1);
    Serial.print(": ");
    Serial.println(macStr);
  }
  Serial.println("------------------");
}

//X·ª≠ l√Ω khi nh·∫≠n ph·∫£n h·ªìi
void handleScanResponse(const uint8_t *mac, int node_id, int local_id)
{
  if (!isMacExist(mac))
  {
    addMacToList(node_id, local_id, mac, millis());
  }
  else
  {
    Serial.println("Thi·∫øt b·ªã ƒë√£ t·ªìn t·∫°i, b·ªè qua ph·∫£n h·ªìi");
  }
}

void print_mac(const uint8_t *mac)
{
    //H√†m in ƒë·ªãa ch·ªâ MAC t·ª´ m·ªôt m·∫£ng 6 byte
  for (int i = 0; i < 6; i++)
  {
    if (mac[i] < 0x10)
    {
      Serial.print("0"); //th√™m s·ªë 0 n·∫øu byte < 16 (ƒë·ªÉ ƒë·∫£m b·∫£o 2 ch·ªØ s·ªë)
    }
    Serial.print(mac[i], HEX); //In byte d∆∞·ªõi d·∫°ng th·∫≠p l·ª•c ph√¢n
    if (i < 5)
    {
      Serial.print(":"); //Th√™m d·∫•u: gi·ªØa c√°c byte, tr·ª´ byte cu·ªëi 
    }
  }
  Serial.println(); //Xu·ªëng d√≤ng sau khi in 
}

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status)
{
  Serial.print("Send Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? " Success" : " Fail");
}

void onReceive(const esp_now_recv_info *recv_info, const uint8_t *incomingData, int len)
{
  const uint8_t *mac_addr = recv_info->src_addr;
  Serial.print("\nüì© Received response:");
  Serial.println(strlen((const char *)incomingData));
  StaticJsonDocument<512> doc;
  DeserializationError error = deserializeJson(doc, incomingData, len);

  if (error)
  {
    Serial.print("deserializeJson() failed: ");
    Serial.println(error.c_str());
    return;
  }
  processReceivedData(doc, mac_addr);
}

void addPeer(uint8_t *macAddr)
{
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, macAddr, 6); // FF:FF:FF:FF
  peerInfo.channel = 1;                   // K√™nh c·ªë ƒë·ªãnh ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi sender
  peerInfo.encrypt = false;               // T·∫°m th·ªùi t·∫Øt m√£ h√≥a
  if (esp_now_add_peer(&peerInfo) != ESP_OK)
  {
    Serial.println("‚ùå Failed to add peer!");
  }
  else
  {
    Serial.println("add peer ok");
  }
}

#endif // ESPNOW_HANDLER_H